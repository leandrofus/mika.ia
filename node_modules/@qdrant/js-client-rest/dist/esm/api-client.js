import { createClusterApi } from './api/cluster-api.js';
import { createCollectionsApi } from './api/collections-api.js';
import { createPointsApi } from './api/points-api.js';
import { createServiceApi } from './api/service-api.js';
import { createSnapshotsApi } from './api/snapshots-api.js';
import { QdrantClientTimeoutError, QdrantClientUnexpectedResponseError } from './errors.js';
import { Fetcher } from '@qdrant/openapi-typescript-fetch';
export function createApis(baseUrl, args) {
    const client = createClient(baseUrl, args);
    return {
        cluster: createClusterApi(client),
        collections: createCollectionsApi(client),
        points: createPointsApi(client),
        service: createServiceApi(client),
        snapshots: createSnapshotsApi(client),
    };
}
export function createClient(baseUrl, { headers, timeout }) {
    const use = [];
    if (Number.isFinite(timeout)) {
        use.push(async (url, init, next) => {
            const controller = new AbortController();
            const id = setTimeout(() => controller.abort(), timeout);
            try {
                return await next(url, { ...init, signal: controller.signal });
            }
            catch (e) {
                if (e instanceof Error && e.name === 'AbortError') {
                    throw new QdrantClientTimeoutError(e.message);
                }
                throw e;
            }
            finally {
                clearTimeout(id);
            }
        });
    }
    use.push(async (url, init, next) => {
        const response = await next(url, init);
        if (response.status === 200 || response.status === 201) {
            return response;
        }
        throw QdrantClientUnexpectedResponseError.forResponse(response);
    });
    const client = Fetcher.for();
    client.configure({ baseUrl, init: { headers }, use });
    return client;
}
